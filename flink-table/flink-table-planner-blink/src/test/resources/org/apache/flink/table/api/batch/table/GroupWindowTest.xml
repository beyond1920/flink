<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testAllEventTimeSlidingGroupWindowOverTime">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR$0=[$0])
+- LogicalWindowAggregate(group=[{}], EXPR$0=[COUNT($1)], window=[SlidingGroupWindow('w, long, 8, 10)], properties=[])
   +- LogicalTableScan(table=[[default_catalog, default_database, Table1, source: [TestTableSource(long, int, string)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
HashWindowAggregate(window=[SlidingGroupWindow('w, long, 8, 10)], select=[Final_COUNT(count$0) AS EXPR$0])
+- Exchange(distribution=[single])
   +- LocalHashWindowAggregate(window=[SlidingGroupWindow('w, long, 8, 10)], select=[Partial_COUNT(int) AS count$0])
      +- TableSourceScan(table=[[default_catalog, default_database, Table1, source: [TestTableSource(long, int, string)]]], fields=[long, int, string])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testAllEventTimeTumblingGroupWindowOverTime">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR$0=[$0])
+- LogicalWindowAggregate(group=[{}], EXPR$0=[COUNT($1)], window=[TumblingGroupWindow], properties=[])
   +- LogicalTableScan(table=[[default_catalog, default_database, Table1, source: [TestTableSource(long, int, string)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
HashWindowAggregate(window=[TumblingGroupWindow], select=[Final_COUNT(count$0) AS EXPR$0])
+- Exchange(distribution=[single])
   +- LocalHashWindowAggregate(window=[TumblingGroupWindow], select=[Partial_COUNT(int) AS count$0])
      +- TableSourceScan(table=[[default_catalog, default_database, Table1, source: [TestTableSource(long, int, string)]]], fields=[long, int, string])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testDecomposableAggFunctions">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR$0=[$0], EXPR$1=[$1], EXPR$2=[$2], EXPR$3=[$3], EXPR$4=[$4], EXPR$5=[$5])
+- LogicalWindowAggregate(group=[{}], EXPR$0=[VAR_POP($3)], EXPR$1=[VAR_SAMP($3)], EXPR$2=[STDDEV_POP($3)], EXPR$3=[STDDEV_SAMP($3)], window=[TumblingGroupWindow], properties=[EXPR$4, EXPR$5])
   +- LogicalTableScan(table=[[default_catalog, default_database, T1]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[/(-($f0, /(*(CAST($f1), CAST($f1)), $f2)), $f2) AS EXPR$0, /(-($f0, /(*(CAST($f1), CAST($f1)), $f2)), CASE(=($f2, 1), null:BIGINT, -($f2, 1))) AS EXPR$1, POWER(/(-($f0, /(*(CAST($f1), CAST($f1)), $f2)), $f2), 0.5:DECIMAL(2, 1)) AS EXPR$2, POWER(/(-($f0, /(*(CAST($f1), CAST($f1)), $f2)), CASE(=($f2, 1), null:BIGINT, -($f2, 1))), 0.5:DECIMAL(2, 1)) AS EXPR$3, EXPR$4, EXPR$5])
+- HashWindowAggregate(window=[TumblingGroupWindow], properties=[EXPR$4, EXPR$5], select=[Final_SUM(sum$0) AS $f0, Final_SUM(sum$1) AS $f1, Final_COUNT(count$2) AS $f2])
   +- Exchange(distribution=[single])
      +- LocalHashWindowAggregate(window=[TumblingGroupWindow], properties=[EXPR$4, EXPR$5], select=[Partial_SUM($f4) AS sum$0, Partial_SUM(c) AS sum$1, Partial_COUNT(c) AS count$2])
         +- Calc(select=[rowtime, a, b, c, *(CAST(c), CAST(c)) AS $f4])
            +- BoundedStreamScan(table=[[default_catalog, default_database, T1]], fields=[rowtime, a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testEventTimeSlidingGroupWindowOverTime">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(string=[$0], EXPR$0=[$1])
+- LogicalWindowAggregate(group=[{2}], EXPR$0=[COUNT($1)], window=[SlidingGroupWindow('w, long, 8, 10)], properties=[])
   +- LogicalTableScan(table=[[default_catalog, default_database, Table1, source: [TestTableSource(long, int, string)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
HashWindowAggregate(groupBy=[string], window=[SlidingGroupWindow('w, long, 8, 10)], select=[string, Final_COUNT(count$0) AS EXPR$0])
+- Exchange(distribution=[hash[string]])
   +- LocalHashWindowAggregate(groupBy=[string], window=[SlidingGroupWindow('w, long, 8, 10)], select=[string, Partial_COUNT(int) AS count$0])
      +- TableSourceScan(table=[[default_catalog, default_database, Table1, source: [TestTableSource(long, int, string)]]], fields=[long, int, string])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testEventTimeSlidingGroupWindowOverTimeWithUdAgg">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(string=[$0], EXPR$0=[$1])
+- LogicalWindowAggregate(group=[{2}], EXPR$0=[myWeightedAvg($0, $1)], window=[SlidingGroupWindow('w, long, 8, 10)], properties=[])
   +- LogicalTableScan(table=[[default_catalog, default_database, Table1, source: [TestTableSource(long, int, string)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortWindowAggregate(groupBy=[string], window=[SlidingGroupWindow('w, long, 8, 10)], select=[string, Final_myWeightedAvg(EXPR$0) AS EXPR$0])
+- Sort(orderBy=[string ASC, assignedWindow$ ASC])
   +- Exchange(distribution=[hash[string]])
      +- LocalSortWindowAggregate(groupBy=[string], window=[SlidingGroupWindow('w, long, 8, 10)], select=[string, Partial_myWeightedAvg(long, int) AS EXPR$0])
         +- Sort(orderBy=[string ASC, long ASC])
            +- TableSourceScan(table=[[default_catalog, default_database, Table1, source: [TestTableSource(long, int, string)]]], fields=[long, int, string])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testEventTimeTumblingGroupWindowOverTime">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(string=[$0], EXPR$0=[$1])
+- LogicalWindowAggregate(group=[{2}], EXPR$0=[COUNT($1)], window=[TumblingGroupWindow], properties=[])
   +- LogicalTableScan(table=[[default_catalog, default_database, Table1, source: [TestTableSource(long, int, string)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
HashWindowAggregate(groupBy=[string], window=[TumblingGroupWindow], select=[string, Final_COUNT(count$0) AS EXPR$0])
+- Exchange(distribution=[hash[string]])
   +- LocalHashWindowAggregate(groupBy=[string], window=[TumblingGroupWindow], select=[string, Partial_COUNT(int) AS count$0])
      +- TableSourceScan(table=[[default_catalog, default_database, Table1, source: [TestTableSource(long, int, string)]]], fields=[long, int, string])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testEventTimeTumblingGroupWindowOverTimeWithUdAgg">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(string=[$0], EXPR$0=[$1])
+- LogicalWindowAggregate(group=[{2}], EXPR$0=[myWeightedAvg($0, $1)], window=[TumblingGroupWindow], properties=[])
   +- LogicalTableScan(table=[[default_catalog, default_database, Table1, source: [TestTableSource(long, int, string)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortWindowAggregate(groupBy=[string], window=[TumblingGroupWindow], select=[string, Final_myWeightedAvg(EXPR$0) AS EXPR$0])
+- Sort(orderBy=[string ASC, assignedWindow$ ASC])
   +- Exchange(distribution=[hash[string]])
      +- LocalSortWindowAggregate(groupBy=[string], window=[TumblingGroupWindow], select=[string, Partial_myWeightedAvg(long, int) AS EXPR$0])
         +- Sort(orderBy=[string ASC, long ASC])
            +- TableSourceScan(table=[[default_catalog, default_database, Table1, source: [TestTableSource(long, int, string)]]], fields=[long, int, string])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testLongEventTimeSlidingGroupWindowWithProperties">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(string=[$0], EXPR$0=[$1], EXPR$1=[$2], EXPR$2=[$3], EXPR$3=[$4])
+- LogicalWindowAggregate(group=[{2}], EXPR$0=[COUNT($1)], window=[SlidingGroupWindow('w, ts, 3600000, 600000)], properties=[EXPR$1, EXPR$2, EXPR$3])
   +- LogicalTableScan(table=[[default_catalog, default_database, Table1, source: [TestTableSource(ts, int, string)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
HashWindowAggregate(groupBy=[string], window=[SlidingGroupWindow('w, ts, 3600000, 600000)], properties=[EXPR$1, EXPR$2, EXPR$3], select=[string, Final_COUNT(count$0) AS EXPR$0])
+- Exchange(distribution=[hash[string]])
   +- LocalHashWindowAggregate(groupBy=[string], window=[SlidingGroupWindow('w, ts, 3600000, 600000)], properties=[EXPR$1, EXPR$2, EXPR$3], select=[string, Partial_COUNT(int) AS count$0])
      +- TableSourceScan(table=[[default_catalog, default_database, Table1, source: [TestTableSource(ts, int, string)]]], fields=[ts, int, string])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTimestampEventTimeSlidingGroupWindowWithProperties">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(string=[$0], EXPR$0=[$1], EXPR$1=[$2], EXPR$2=[$3], EXPR$3=[$4])
+- LogicalWindowAggregate(group=[{2}], EXPR$0=[COUNT($1)], window=[SlidingGroupWindow('w, ts, 3600000, 600000)], properties=[EXPR$1, EXPR$2, EXPR$3])
   +- LogicalTableScan(table=[[default_catalog, default_database, Table1, source: [TestTableSource(ts, int, string)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
HashWindowAggregate(groupBy=[string], window=[SlidingGroupWindow('w, ts, 3600000, 600000)], properties=[EXPR$1, EXPR$2, EXPR$3], select=[string, Final_COUNT(count$0) AS EXPR$0])
+- Exchange(distribution=[hash[string]])
   +- LocalHashWindowAggregate(groupBy=[string], window=[SlidingGroupWindow('w, ts, 3600000, 600000)], properties=[EXPR$1, EXPR$2, EXPR$3], select=[string, Partial_COUNT(int) AS count$0])
      +- TableSourceScan(table=[[default_catalog, default_database, Table1, source: [TestTableSource(ts, int, string)]]], fields=[ts, int, string])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testLongEventTimeTumblingGroupWindowWithProperties">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(string=[$0], EXPR$0=[$1], EXPR$1=[$2], EXPR$2=[$3], EXPR$3=[$4])
+- LogicalWindowAggregate(group=[{2}], EXPR$0=[COUNT($1)], window=[TumblingGroupWindow], properties=[EXPR$1, EXPR$2, EXPR$3])
   +- LogicalTableScan(table=[[default_catalog, default_database, Table1, source: [TestTableSource(ts, int, string)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
HashWindowAggregate(groupBy=[string], window=[TumblingGroupWindow], properties=[EXPR$1, EXPR$2, EXPR$3], select=[string, Final_COUNT(count$0) AS EXPR$0])
+- Exchange(distribution=[hash[string]])
   +- LocalHashWindowAggregate(groupBy=[string], window=[TumblingGroupWindow], properties=[EXPR$1, EXPR$2, EXPR$3], select=[string, Partial_COUNT(int) AS count$0])
      +- TableSourceScan(table=[[default_catalog, default_database, Table1, source: [TestTableSource(ts, int, string)]]], fields=[ts, int, string])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTimestampEventTimeTumblingGroupWindowWithProperties">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(string=[$0], EXPR$0=[$1], EXPR$1=[$2], EXPR$2=[$3], EXPR$3=[$4])
+- LogicalWindowAggregate(group=[{2}], EXPR$0=[COUNT($1)], window=[TumblingGroupWindow], properties=[EXPR$1, EXPR$2, EXPR$3])
   +- LogicalTableScan(table=[[default_catalog, default_database, Table1, source: [TestTableSource(ts, int, string)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
HashWindowAggregate(groupBy=[string], window=[TumblingGroupWindow], properties=[EXPR$1, EXPR$2, EXPR$3], select=[string, Final_COUNT(count$0) AS EXPR$0])
+- Exchange(distribution=[hash[string]])
   +- LocalHashWindowAggregate(groupBy=[string], window=[TumblingGroupWindow], properties=[EXPR$1, EXPR$2, EXPR$3], select=[string, Partial_COUNT(int) AS count$0])
      +- TableSourceScan(table=[[default_catalog, default_database, Table1, source: [TestTableSource(ts, int, string)]]], fields=[ts, int, string])
]]>
    </Resource>
  </TestCase>
</Root>
